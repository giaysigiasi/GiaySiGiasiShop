@model BlogPostModel
@using Nop.Web.Models.Blogs;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";
    
    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Title);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
}

<div class="center-1"> 
	<div class="breadcrumb">
		<div class="container">
			<ul>
				<li>
					<span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb">
						<a href="@Url.RouteUrl("HomePage")" itemprop="url">
							<span itemprop="title">@T("Products.Breadcrumb.Top")</span>
						</a>
					</span>
				</li>
				<li class="current-item">
					@T("Why your online store needs a wish list")      
				</li>
			</ul>
		</div>
	</div>
	<div class="container">
		<div class="row">
			<div class="topic-title" id="ph-title">
				<h2>Blog</h2>
			</div>
			<div class="blogPostDetail">
				<div class="col-md-12 leftColumn">
					<div id="postlist">				
						<div class="">
							<div class="postDetailBorder">
								<div class="text-center">
									<div class="row">
										<div class="col-sm-9">
											<h3 class="pull-left">@Model.Title</h3>
										</div>
										<div class="col-sm-3">
											<h5 class="pull-right"><span>@Model.CreatedOn.ToString("D")</span></h5>
										</div>
									</div>
								</div>
							</div>
							<div class="textDetailWrapper">
								<div class="text-center">								
                                    <img src="~/Themes/Mybags/Content/images/Mybags-5.jpg" />
								</div>
								<div class="detailContent">							   
										@Html.Widget("blogpost_page_before_body")
										<div class="post-body">
											@Html.Raw(Model.Body)
										</div>
										@if (Model.Tags.Count > 0)
										{
											<div class="tags hyperLink">
												<label><strong>@T("Blog.Tags"):</strong></label>
											 
												@for (int i = 0; i < Model.Tags.Count; i++)
												{
													var tag = Model.Tags[i];
													<a href="@Url.RouteUrl("BlogByTag", new { tag = tag })">@tag</a>
													if (i != Model.Tags.Count - 1)
													{
														<span class="separator">,</span>
													}
												}
											   
											</div>
										}
										@Html.Widget("blogpost_page_before_comments")
										@if (Model.AllowComments)
										{
											<div class="fieldset new-comment postDetailForm">
												<div class="title">
													<h4>@T("Blog.Comments.LeaveYourComment")</h4>
												</div>
												@*<div class="notifications">
													<div class="message-error">@Html.ValidationSummary(true)</div>
													@{
														var result = TempData["nop.blog.addcomment.result"] as string;
													}
													@if (!String.IsNullOrEmpty(result))
													{
														<div class="result">@result</div>
													}
												</div>*@
												@using (Html.BeginForm())
												{
													 @Html.AntiForgeryToken()
													<div class="form-fields row">
														<div class=" form-group  inputs">
														
															@Html.LabelFor(model => model.AddNewComment.CommentText, new { @class = "col-md-2 control-label" }, ":")
															<div class="col-md-8">
																@Html.TextAreaFor(model => model.AddNewComment.CommentText, new { @class = "form-control",rows="10" })
															</div>
															<div class="col-md-offset-2 col-md-4">
																@Html.ValidationMessageFor(model => model.AddNewComment.CommentText)
															</div>
														</div>
														@if (Model.AddNewComment.DisplayCaptcha)
														{
															<div class="captcha-box">
																@Html.Raw(Html.GenerateCaptcha())
															</div>
														}
													</div>
													 
													<div class="row">
														<div class="col-md-offset-2 col-md-2">
															<div class="buttons">
																<input type="submit" name="add-comment" class="button-1 btn btn-primary contact-us-button spaceTop" value="@T("Blog.Comments.SubmitButton")" />
															</div>
														</div>
													</div>
												}
											</div>
											if (Model.Comments.Count > 0)
											{
												<div class="comment-list borderBottom">
													<div class="title">
														<h4>@T("Blog.Comments")</h4>
													</div>
													@foreach (var comment in Model.Comments)
													{
														<div class="blog-comment row">
															<div class="comment-info col-md-2">
																<div class="user-info">
																	@if (comment.AllowViewingProfiles)
																	{
																		<a href="@Url.RouteUrl("CustomerProfile", new { id = comment.CustomerId })" class="username">@(comment.CustomerName)</a>
																	}
																	else
																	{
																		<h5><span class="username">@(comment.CustomerName)</span></h5>
																	}
																	<div class="avatar">
																		@if (!String.IsNullOrEmpty(comment.CustomerAvatarUrl))
																		{
																			<img src="@(comment.CustomerAvatarUrl)" class="avatar-img" title="avatar" alt="avatar" />
																		}
																	</div>
																</div>
															</div>
															<div class="comment-content col-md-10">
															 
																<div class="comment-time title mid-content-title" style="border: none">
																	<label>@T("Blog.Comments.CreatedOn"):</label>
																	<span class="stat-value">@comment.CreatedOn.ToString("g")</span>
																</div>
																<div class="comment-body">
																	@Html.Raw(Nop.Core.Html.HtmlHelper.FormatText(comment.CommentText, false, true, false, false, false, false))
																</div>
															   
															</div>
															@Html.Widget("blogpost_page_inside_comment")
														</div>
													}
												</div>
											}
										}
										@Html.Widget("blogpost_page_after_comments")
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>









