@model CustomerInfoModel
@using Nop.Web.Models.Customer;
@using Nop.Core;
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Account").Text);
}
@section left
{
    @Html.Action("CustomerNavigation", "Customer", new { selectedTabId = CustomerNavigationEnum.Info })
}
@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script type="text/javascript">
        $(function () {
            $("#@Html.FieldIdFor(model => model.CountryId)").change(function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.FieldIdFor(model => model.StateProvinceId)");
             var statesProgress = $("#states-loading-progress");
             statesProgress.show();
             $.ajax({
                 cache: false,
                 type: "GET",
                 url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                 data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}
<div class="inner-page account-page customer-info-page">
    <div class="trade-form">
        <!--<h2>@T("Account.MyAccount") - @T("Account.CustomerInfo")</h2>-->
        <h2>@T("Account.CustomerInfo")</h2>
        <div class="row">
            <div class="col-md-8">
                <div class="row">
                    <div class="form-fields">
                    @using (Html.BeginForm())
                    {
                    @Html.AntiForgeryToken()
                    var validationSummary = Html.ValidationSummary(true);
                    if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                    {
                    <div class="message-error">@validationSummary</div>
                    }
                    
                    <div class="field">
                    <div class="col-md-4">
                    @Html.LabelFor(model => model.FirstName, new { }, "")
                    @Html.RequiredHint()
                    </div>
                    <div class="col-md-8">
                    @Html.EditorFor(model => model.FirstName)
                    @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                    </div>
                    <div class="field">
                    <div class="col-md-4">
                    @Html.LabelFor(model => model.LastName, new { }, "")
                    @Html.RequiredHint()
                    </div>
                    <div class="col-md-8">
                    @Html.EditorFor(model => model.LastName)
                    @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                    </div>
                    if (Model.GenderEnabled)
                    {
                    <div class="field block-label">
                    <div class="col-md-4">
                        <label class="pd-0">@T("Account.Fields.Gender")</label>
                    </div>
                    <div class="col-md-8">
                        <div class="radio-container">
                            @Html.RadioButton("Gender", "M", (Model.Gender == "M"), new { id = "gender-male" })
                            <label class="forcheckbox" for="gender-male">@T("Account.Fields.Gender.Male")</label>
                            @Html.RadioButton("Gender", "F", (Model.Gender == "F"), new { id = "gender-female" })
                            <label class="forcheckbox" for="gender-female">@T("Account.Fields.Gender.Female")</label>
                        </div>
                    </div>
                    </div>
                    }
                    
                    if (Model.DateOfBirthEnabled)
                    {
                    <div class="field block-label">
                    <div class="col-md-4">
                        <label>@T("Account.Fields.DateOfBirth")</label>
                    </div>
                    <div class="col-md-8">
                        @Html.DatePickerDropDowns(
                    
                    Html.FieldNameFor(x => x.DateOfBirthDay),
                    Html.FieldNameFor(x => x.DateOfBirthMonth),
                    Html.FieldNameFor(x => x.DateOfBirthYear),
                    DateTime.Now.Year - 110,
                    DateTime.Now.Year,
                    Model.DateOfBirthDay,
                    Model.DateOfBirthMonth,
                    Model.DateOfBirthYear)
                    
                        @Html.ValidationMessageFor(model => model.DateOfBirthDay)
                        @Html.ValidationMessageFor(model => model.DateOfBirthMonth)
                        @Html.ValidationMessageFor(model => model.DateOfBirthYear)
                    
                    </div>
                    </div>
                    <script type="text/javascript">
                    
                    $(function () {
                        $("select[name='DateOfBirthMonth'],select[name='DateOfBirthDay'],select[name='DateOfBirthYear']").addClass("select-box");
                    });
                    </script>
                    }
                    <div class="field">
                    <div class="col-md-4">
                    @Html.LabelFor(model => model.Email, new { }, "")
                    @Html.RequiredHint()
                    </div>
                    <div class="col-md-8">
                    @Html.EditorFor(model => model.Email)
                    @Html.ValidationMessageFor(model => model.Email)
                    </div>
                    </div>
                    if (Model.UsernamesEnabled)
                    {
                    if (Model.AllowUsersToChangeUsernames)
                    {
                    <div class="inputs">
                        @Html.LabelFor(model => model.Username, new { }, ":")
                        @Html.EditorFor(model => model.Username)
                        @Html.RequiredHint()
                        @Html.ValidationMessageFor(model => model.Username)
                        @if (Model.CheckUsernameAvailabilityEnabled)
                    {
                        @Html.Partial("_CheckUsernameAvailability")
                    }
                    </div>
                    }
                    else
                    {
                    <div class="inputs">
                        @Html.LabelFor(model => model.Username, new { }, ":")
                        @Model.Username
                    </div>
                    }
                    }
                    
                    if (Model.CompanyEnabled || Model.DisplayVatNumber)
                    {
                    
                    if (Model.CompanyEnabled)
                    {
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Company, new { }, ":")
                            @if (Model.CompanyRequired)
                            {
                            @Html.RequiredHint()
                            }
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.Company)
                            @Html.ValidationMessageFor(model => model.Company)
                        </div>
                    </div>
                    }
                    if (Model.DisplayVatNumber)
                    {
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.VatNumber, new { }, ":")
                    
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.VatNumber)
                        </div>
                    </div>
                    <div class="field">
                        <div class="col-md-8 col-md-offset-4">
                            <span class="vat-status">@Model.VatNumberStatusNote</span>
                            <span class="vat-note"><em>@T("Account.Fields.VatNumber.Note")</em></span>
                        </div>
                    </div>
                    }
                    
                    
                    }
                    if (Model.StreetAddressEnabled ||
                    Model.StreetAddress2Enabled ||
                    Model.ZipPostalCodeEnabled ||
                    Model.CityEnabled ||
                    Model.CountryEnabled)
                    {
                    
                    
                    
                    if (Model.StreetAddressEnabled)
                    {
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.StreetAddress, new { }, ":")
                            @if (Model.StreetAddressRequired)
                                {
                            @Html.RequiredHint()
                                }
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.StreetAddress)
                            @Html.ValidationMessageFor(model => model.StreetAddress)
                        </div>
                    </div>
                    
                    }
                    if (Model.StreetAddress2Enabled)
                    {
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.StreetAddress2, new { }, ":")
                            @if (Model.StreetAddress2Required)
                                {
                            @Html.RequiredHint()
                                }
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.StreetAddress2)
                            @Html.ValidationMessageFor(model => model.StreetAddress2)
                        </div>
                    </div>
                    }
                    if (Model.ZipPostalCodeEnabled)
                    {
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.ZipPostalCode, new { }, ":")
                            @if (Model.ZipPostalCodeRequired)
                                {
                            @Html.RequiredHint()
                                }
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.ZipPostalCode)
                            @Html.ValidationMessageFor(model => model.ZipPostalCode)
                        </div>
                    </div>
                    
                    }
                    if (Model.CityEnabled)
                    {
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.City, new { }, ":")
                            @if (Model.CityRequired)
                                {
                            @Html.RequiredHint()
                                }
                        </div>
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.City)
                            @Html.ValidationMessageFor(model => model.City)
                        </div>
                    </div>
                    
                    }
                    if (Model.CountryEnabled)
                    {
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.CountryId, new { }, ":")
                            @if (Model.CountryRequired)
                    {
                            @Html.RequiredHint()
                    }
                        </div>
                        <div class="col-md-8">
                            @Html.DropDownList("CountryId", Model.AvailableCountries)
                            @Html.ValidationMessageFor(model => model.CountryId)
                        </div>
                    </div>
                    
                    }
                    if (Model.CountryEnabled && Model.StateProvinceEnabled)
                    {
                    
                    <div class="field">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.StateProvinceId, new { }, ":")
                            @if (Model.StateProvinceRequired)
                    {
                            @Html.RequiredHint()
                    }
                        </div>
                        <div class="col-md-8">
                            @Html.DropDownList("StateProvinceId", Model.AvailableStates)
                    
                            @Html.ValidationMessageFor(model => model.StateProvinceId)
                            <span id="states-loading-progress" style="display: none;" class="please-wait">@T("Common.Wait...")</span>
                        </div>
                    </div>
                    
                    
                    }
                    
                    }
                    if (Model.PhoneEnabled || Model.FaxEnabled)
                    {
                    
                    <h3>@T("Account.YourContactInformation")</h3>
                    <div class="row">
                    <div class="col-md-12 mb-30">
                        <div class="form-fields">
                    
                            @if (Model.PhoneEnabled)
                        {
                            <div class="field">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.Phone, new { }, ":")
                                    @if (Model.PhoneRequired)
                                    {
                                @Html.RequiredHint()
                                    }
                                </div>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Phone)
                                    @Html.ValidationMessageFor(model => model.Phone)
                                </div>
                            </div>
                        }
                            @if (Model.FaxEnabled)
                        {
                            <div class="field">
                                <div class="col-md-4">
                                    @Html.LabelFor(model => model.Fax, new { }, ":")
                                    @if (Model.FaxRequired)
                                    {
                                @Html.RequiredHint()
                                    }
                                </div>
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.Fax)
                                    @Html.ValidationMessageFor(model => model.Fax)
                                </div>
                            </div>
                        }
                    
                        </div>
                    </div>
                    </div>
                    }
                    if (Model.NewsletterEnabled || Model.CustomerAttributes.Count > 0)
                    {
                    if (Model.NewsletterEnabled)
                    {
                    <div class="field">
                        <div class="col-md-4 reverse">
                            @Html.LabelFor(model => model.Newsletter, new { }, ":")
                        </div>
                        <div class="col-md-1">
                            @Html.EditorFor(model => model.Newsletter)
                            @Html.ValidationMessageFor(model => model.Newsletter)
                        </div>
                    </div>
                    }
                    if (Model.CustomerAttributes.Count > 0)
                    {
                    @Html.Partial("_CustomerAttributes", Model.CustomerAttributes)
                    }
                    
                    }
                    if (Model.AllowCustomersToSetTimeZone || Model.SignatureEnabled)
                    {
                    <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.Preferences")</strong>
                    </div>
                    <div class="form-fields">
                        @if (Model.AllowCustomersToSetTimeZone)
                    {
                            <div class="inputs">
                                @Html.LabelFor(model => model.TimeZoneId, new { }, ":")
                                @Html.DropDownList("TimeZoneId", Model.AvailableTimeZones)
                                @Html.ValidationMessageFor(model => model.TimeZoneId)
                            </div>
                    }
                        @if (Model.SignatureEnabled)
                    {
                            <div class="inputs">
                                @Html.LabelFor(model => model.Signature, new { }, ":")
                                @Html.TextAreaFor(model => model.Signature, new { @class = "account-signature-text" })
                            </div>
                    }
                    </div>
                    </div>
                    }
                    
                    if (Model.NumberOfExternalAuthenticationProviders > 0)
                    {
                    <div class="fieldset">
                    <div class="title">
                        <strong>@T("Account.AssociatedExternalAuth")</strong>
                    </div>
                    @if (Model.AssociatedExternalAuthRecords.Count > 0)
                    {
                    //existing associated external records
                        <div class="table-wrapper">
                            <table class="data-table">
                                <colgroup>
                                    <col />
                                    <col />
                                    <col />
                                </colgroup>
                                <thead>
                                    <tr>
                                        <th class="auth-method-name">
                                            @T("Account.AssociatedExternalAuth.AuthMethodName")
                                        </th>
                                        <th class="email">
                                            @T("Account.AssociatedExternalAuth.Email")
                                        </th>
                                        <th class="external-id">
                                            @T("Account.AssociatedExternalAuth.ExternalIdentifier")
                                        </th>
                                        <th class="remove">
                                            @T("Account.AssociatedExternalAuth.Remove")
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.AssociatedExternalAuthRecords)
                        {
                                        <tr>
                                            <td class="auth-method-name">
                                                @item.AuthMethodName
                                            </td>
                                            <td class="email">
                                                @item.Email
                                            </td>
                                            <td class="external-id">
                                                @CommonHelper.EnsureMaximumLength(item.ExternalIdentifier, 40, "...")
                                            </td>
                                            <td class="remove">
                                                <a href="@Url.Action("RemoveExternalAssociation", "Customer", new { id = item.Id })">@T("Account.AssociatedExternalAuth.Remove")</a>
                                            </td>
                                        </tr>
                        }
                                </tbody>
                            </table>
                        </div>
                    }
                    
                    @if (Model.NumberOfExternalAuthenticationProviders > Model.AssociatedExternalAuthRecords.Count)
                    {
                    //we can add more external records
                        <div class="form-fields add-more-external-records">
                            @T("Account.AssociatedExternalAuth.AddMoreRecords") <a href="@Url.RouteUrl("Login", null, "http")">@Url.RouteUrl("Login", null, "http")</a>
                        </div>
                    }
                    </div>
                                }
                                <div class="buttons">
                                    <div class="col-md-8 col-md-offset-4">
                                        <input type="submit" value="@T("Common.Save")" name="save-info-button" class="btn btn-primary save-customer-info-button" />
                                    </div>
                                </div>

                            }
                        </div>
                </div>
            </div>
        </div>
    </div>
</div>
